[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_shell_command update_fwbtt]
command: sh /home/pi/klipper/updateFWBTT.sh
timeout: 120.0
verbose: True

[gcode_macro UPDATE_BTT_FW]
gcode:
  RUN_SHELL_COMMAND CMD=update_fwbtt

[gcode_macro SET_SPEED]
gcode:
  {% set spd = params.SPEED|default(100)|int %}
  {action_respond_info("Speed: '%s'" % (spd))}
  M220 S{spd}
  #TUNING_TOWER COMMAND=SET_SPEED PARAMETER=SPEED START=100 FACTOR=10 BAND=5

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}


[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

[gcode_macro TEST_SPEEDAB]
description: Used to test max SPEED and ACCEL
gcode:
    # command params
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    {% set iterations = params.ITERATIONS|default(5)|int %}
    {% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set bound = params.BOUND|default(20)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    {% set motors = params.MOTORS|default("AB") %}
    # variables
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TEST_SPEED ====")}
        {action_respond_info("speed: '%s'" % (speed))}
        {action_respond_info("iterations: '%s'" % (iterations))}
        {action_respond_info("bound: '%s'" % (bound))}
        {action_respond_info("new_z_offset: '%s'" % (new_z_offset))}
        {action_respond_info("min: [x: '%s', y:'%s']" % (x_min,y_min))}
        {action_respond_info("max: [x: '%s', y:'%s']" % (x_max,y_max))}
        {action_respond_info("===============")}
    {% endif %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Absolute positioning
    G90

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    # Home and get position for comparison later:
    G28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
          {action_respond_info("==== SET_PLATE ====")}
          {action_respond_info("index: '%s'" % (motors))}
          {action_respond_info("===============")}
    {% for i in range(iterations) %}
        {% if motors == "AB" or motors == "B" %}
          # Diagonals
          G0 X{x_min} Y{y_min} F{speed * 60}
          G0 X{x_max} Y{y_max} F{speed * 60}
          G0 X{x_min} Y{y_min} F{speed * 60}
        {% endif %}

        {% if motors == "AB" or motors == "A" %}
          G0 X{x_max} Y{y_min} F{speed * 60}
          G0 X{x_min} Y{y_max} F{speed * 60}
          G0 X{x_max} Y{y_min} F{speed * 60}
        {% endif %}
        
        {% if motors == "AB" %}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        {% endif %}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

    # Re-home XY and get position again for comparison:
    G28 X Y
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

