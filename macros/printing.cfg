#########NEEDED IN SLICER FOR TEMPERATURES TO WORK###########################################################################################################################
## PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature] CHAMBER=[chamber_temperature] FILAMENT={filament_type[0]} ##
#############################################################################################################################################################################
[gcode_macro PRINT_START]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
  {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
  {% set unretract_start = printer['gcode_macro _USER_VARIABLE'].unretract_start|float %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set ena_quad_gantry_level = printer['gcode_macro _USER_VARIABLE'].quad_gantry_level|lower %}
  {% set ena_bed_mesh = printer['gcode_macro _USER_VARIABLE'].bed_mesh|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_START ====')}
    {action_respond_info("targets [bed: %s, extruder: %s, chamber: %s, filament_type: %s]" % (target_bed,target_extruder,target_chamber,filament_type))}
    {action_respond_info("features [auto_z_offset: %s, quad_gantry_level: %s, bed_mesh: %s]" % (ena_auto_z_offset,ena_quad_gantry_level,ena_bed_mesh))}
    {% if printer.bed_mesh %}
      {action_respond_info("bed_mesh [profile_name: %s]" % (printer.bed_mesh.profile_name))}
    {% endif %}
    {% if ena_auto_z_offset == "flexplate" %}
      {action_respond_info("flexplate [name: %s, offset_z: %s]" % (plate_name,plate_offset_z))}
    {% endif %}
    {action_respond_info("unretract_start: %s" % (unretract_start))}
    {action_respond_info('===============')}
  {% endif %}

  M117 Homing
  G28

  # TODO: Make this extruder holding temp a var EXTRUDER={target_extruder_holding}
  # PREHEAT_CHAMBER BED={target_bed} CHAMBER={target_chamber} FILAMENT={filament_type}

  {% if ena_quad_gantry_level == "true" or ena_bed_mesh == "true" or ena_auto_z_offset == "z_calib" %}
    {% if ena_quad_gantry_level == "true" and not printer.quad_gantry_level.applied %}
      M117 Calibrating QGL
      QUAD_GANTRY_LEVEL
      G28 Z
    {% endif %}

    {% if ena_auto_z_offset == "z_calib" %}
      M117 Calibrating Z
      CALIBRATE_Z
    {% elif ena_auto_z_offset == "flexplate" and printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int] %}
      M117 Setting Z Offset
      DISPLAY_PLATE
      _SET_PLATE_OFFSET
    {% endif %}

    {% if ena_bed_mesh == "true" %}
      {% if printer.bed_mesh.profile_name %}
        M119 Loading Mesh {printer.bed_mesh.profile_name}
        BED_MESH_PROFILE LOAD={printer.bed_mesh.profile_name}
      {% else %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        BED_MESH_PROFILE LOAD=default
      {% endif %}
    {% endif %}
  {% endif %}

  M104 S{target_extruder}
  M117 Heating ~bed~{target_bed}~degrees~ ~extruder~{target_extruder}~degrees~
  M190 S{target_bed}
  M109 S{target_extruder} 

  # M117 Heating ~bed~{target_bed}~degrees~
  # M190 S{target_bed} 
  # M117 Heating ~extruder~: {target_extruder}~degrees~
  # M109 S{target_extruder} # Wait for extruder final temp
  
  G1 Z5 F5000 # Move head 5mm from bed surface
  G90 # Absolute Positioning
  M83 # Make the E relative independant of other axis

  G1 E{unretract_start} F1500 # Unretract filament
  RESET_EXTRUDER
  PRIME_LINE
  M117 Printer goes brrr

[gcode_macro PREHEAT_CHAMBER]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set preheat_filament_types = printer['gcode_macro _USER_VARIABLE'].preheat_filament_types %}
  {% set preheat_min_soak_time = printer['gcode_macro _USER_VARIABLE'].preheat_min_soak_time %}
  {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set park_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set park_z = printer['gcode_macro _USER_VARIABLE'].z_min_delta|float %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== PREHEAT_CHAMBER ====')}
    {action_respond_info("targets [bed: %s, extruder: %s, chamber: %s, filament_type: %s preheat_types: %s]" % (target_bed,target_extruder,target_chamber,filament_type,preheat_filament_types))}
    {action_respond_info("preheat_min_soak_time: %s" % (preheat_min_soak_time))}
    {action_respond_info("park [x: %s,y: %s,z: %s" % (park_x,park_y,park_z))}
    {action_respond_info('===============')}
  {% endif %}
  
  orange
  M117 Preheat Start
  G90 # absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000

  # Chamber/time soak for some filament types
  {% if filament_type in preheat_filament_types %}
    M106 S255 # Turn on Part Cooling Fan to 100%
    _CIRCULATION_START FILAMENT={filament_type}
    
  # Bring the extruder and bed up to targets
  M104 S{target_extruder}
  M117 Heating ~bed~{target_bed}~degrees~
  M190 S{target_bed}       

    # Timed bed soak
    {% if preheat_min_soak_time > 0 %}
      {% for timer in range(preheat_min_soak_time|int,0,-1) %}
        M117 Soaking ~bed~ {timer|int}m 
        M105
        G4 P60000
      {% endfor %}
    {% endif %}

    # Chamber soak
    {% if printer['temperature_sensor chamber'] and target_chamber > 0 and printer['temperature_sensor chamber'].temperature < target_chamber %}
      M117 Soaking ~chamber~ {target_chamber}~degrees~
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
    {% endif %}
  {% endif %}

  M117 Preheat Done


[gcode_macro TOGGLE_BACK_TO_BACK]
description: Toggle back to back printing.
gcode:
  # command params
  # variables 
	{% set b2b_state = printer.save_variables.variables.b2b_state|lower %}
	{% if printer['gcode_macro _USER_VARIABLE'].debug == 1 %}
		{action_respond_info('==== TOGGLE_BACK_TO_BACK ====')}
		{action_respond_info("back to back printing: %s" % (b2b_state))}
		{action_respond_info('===============')}
	{% endif %}

	{% if b2b_state == "off" %}
		{action_respond_info('back to back printing is off, turning it on')}
		SAVE_VARIABLE VARIABLE=b2b_state VALUE='"on"'
	{% else %}
		{action_respond_info('back to back printing is on= turning it off')}
		SAVE_VARIABLE VARIABLE=b2b_state VALUE='"off"'
	{% endif %}

[gcode_macro PRINT_END]
gcode:
  # command params
  {% set filament_type = params.FILAMENT|default("PLA")|upper %}
  # variables 
  {% set retract_end = printer['gcode_macro _USER_VARIABLE'].retract_end|float %}
  # features
  {% set b2b_state = printer.save_variables.variables.b2b_state|lower %}
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_END ====')}
    {action_respond_info("filament_type: %s" % (filament_type))}
    {action_respond_info("retract_end: %s" % (retract_end))}
    {action_respond_info("b2b_state: %s" % (b2b_state))}
    {action_respond_info('===============')}
  {% endif %}

  M400  # wait for buffer to clear
  RESET_EXTRUDER
  G1 E-{retract_end} F800  # retract filament
  G91 # relative positioning
  G0 Z1.00 X20.0 Y20.0 F20000 # move nozzle to remove stringing

	{% if b2b_state == "off" %}
		{action_respond_info('Ending print')}
      TURN_OFF_HEATERS
      M107  # turn off fan
      G1 Z2 F3000 # move nozzle up 2mm
      G90 # absolute positioning
      G28 X Y
      M117 Print complete!
      M84
      _CIRCULATION_END FILAMENT={filament_type}
      M117
	  {% else %}
		  {action_respond_info('Waiting for next print. Holding temperature.')}
      M104 S150
      G28 X Y
	  {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== CANCEL_PRINT ====')}
    {action_respond_info('===============')}
  {% endif %}

  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

[gcode_macro RESET_EXTRUDER]
gcode:
  G92 E0 ; reset extruder

[gcode_macro PRIME_LINE]
description: Print an extruder priming line with optional purge and easy removal handle
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(0)|int, # mm of filament to retract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,   # mm, length of the prime line
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(75)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}
    {% set nozzle_diameter = params.NOZZLE|default(printer.configfile.config['extruder'].nozzle_diameter|float)|float %}

    # sanity check and computed variables
    {% set max_x, max_y = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [range(line.length-10,line.length+10)|random, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    {action_respond_info('Printing prime line')}
    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE